type Query {
  jobs: [Job]
  job(id: ID!): Job
  company(id: ID!): Company
  companies: [Company]
  userProfile(email: String!): UserProfile
  getAllUsers: [UserProfile]
  getJobApplications(jobId: ID!): [JobApplication]
  getJobApplicationsByUser(userId: ID!): [JobApplication]
  jobApplication(id: ID!): JobApplication
  getAllJobApplications: [JobApplication]

}

type Mutation {
  #Job 
  createJob(title: String!, salary: Int!, description: String!, location: String!, companyId: ID!): Job
  deleteJob(id: ID!): Boolean
  updateJob(id: ID!, title: String, salary: Int, description: String, location: String): Job
  #JobApplication
  applyForJob(userId: ID!, jobId: ID!): JobApplication
  updateJobApplicationStatus(applicationId: ID!, status: String!): JobApplication
  deleteJobApplication(applicationId: ID!): Boolean
  #Company
  createCompany(name: String!, description: String!): Company
  deleteCompany(id: ID!): Boolean
  updateCompany(id: ID!, name: String, description: String): Company
  #User
  registerUser(name: String!, email: String!, password: String!): UserProfile
  updateUser(email: String!, name:String, password:String, resumeUrl:String): UserProfile
  loginUser(email: String!, password: String!): String
  deleteUser(email: String!): Boolean
}

type Job {
  id: ID!
  title: String!
  description: String!
  salary: Int!
  location: String!
  company: Company
}

type Company {
  id: ID!
  name: String!
  description: String
}

type UserProfile {
  id: ID!
  name: String!
  email: String!
  password: String!
  resumeUrl: String
  role: String
}

type JobApplication {
  id: ID!
  user: UserProfile!
  job: Job!
  status: String
}
